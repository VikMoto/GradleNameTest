plugins {
    id 'java'

}

group 'org.example'
version '1.0'

repositories {
    mavenCentral()
}

dependencies {
// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.8.1'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'

}


test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes(
                'Main-Class': 'org.example.App'
        )
    }
    from configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }


}

//1)create folder Release
//2)in folder Release put jar file with name app.jar
//3)in folder Release put jar file data.txt
//
tasks.register("cleanRelease") {
    doLast{
        delete 'release'
    }
}

tasks.register("makeRelease") {
    doLast{
        mkdir 'release'
        System.out.println(layout.buildDirectory)
    }
}
tasks.register('copyJarToRelease',Copy) {
//both variants are working but put into different directories!!!!!!!!
//        from layout.buildDirectory.file("/libs/GradleNameTest-1.0.jar")
//        into layout.buildDirectory.dir("release")

    from './build/libs/GradleNameTest-1.0.jar'
    //gradle rename file!!
    into 'release'
    rename 'GradleNameTest-1.0.jar', 'myName.jar'
}

tasks.register('copyDataToRelease',Copy) {
//both variants are working but put into different directories!!!!!!!!
//        from layout.buildDirectory.file("/libs/GradleNameTest-1.0.jar")
//        into layout.buildDirectory.dir("release")
    from './data.txt'
    into 'release'

}

//tasks.makeRelease.dependsOn(Jar)
tasks.makeRelease.dependsOn(cleanRelease) //before makeRelease will delete old "release"
tasks.makeRelease.dependsOn(copyJarToRelease)
tasks.makeRelease.dependsOn(copyDataToRelease)

